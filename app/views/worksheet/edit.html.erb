<div id="workspace">
	<div id="sidebar">
		<button id="create" class="btn btn-success">Create</button>
	</div>
	<div id="rightbar">
		<div id="options">

		</div>
		<div id="options-buttons">
			<div class="options-header">Buttons</div>
			<div class="option">
				<button id="save" class="btn btn-success">Save</button>
				<button id="delete" class="btn btn-danger">Delete</button>
			</div>
		</div>
	</div>
	<div id="worksheet">
		<div id="page-container">
			<div id="page">
			<% @worksheet.visualizations.each do |visualization| %>
			<div class="visualization" id="<%= visualization.identifier %>" style="width: 940px; height: 500px;">
				<div class="visualization-handle"><i class="fa fa-arrows"></i></div>
				<iframe src="/visualization/<%= visualization.identifier %>/view" frameBorder="0"></iframe>
			</div>
			<% end %>
			</div>
		</div>
	</div>
</div>

<script id="general-options-template" type="text/template">
	<div id="general-options" class="options-panel">
		<div class="options-header">General</div>
		<div class="options">
			<div class="option">
				<div class="option-label">Identifier</div>
				<div class="option-value">
					<input id="identifier" type="text" disabled value="<%%= identifier %>"/>
				</div>
			</div>
			<div class="option">
				<div class="option-label">Object</div>
				<div class="option-value">
					<select id="object">
						<option value="text">Text</option>
						<option value="visualization">Visualization</option>
					</select>
				</div>
			</div>
		</div>
	</div>
</script>

<script id="visualization-options-template" type="text/template">
	<div id="visualization-options" class="options-panel options-object">
		<div class="options-header">Visualization</div>
		<div class="options">
			<div class="option">
				<div class="option-label">Dataset</div>
				<div class="option-value">
					<select id="dataset">
						<option value="---">----</option>
						<%= @datasets.each do |dataset| %>
						<option value="<%= dataset.identifier %>"><%= dataset.name %></option>
						<% end %>
					</select>
				</div>
			</div>
			<div class="option">
				<div class="option-label">Type</div>
				<div class="option-value">
					<select id="chart">
						<option value="---">----</option>
						<option value="bar">Bar</option>
						<option value="pie">Pie</option>
						<option value="line">Line</option>
						<option value="geo">Geospatial</option> 
					</select>
				</div>
			</div>
		</div>
	</div>
</script>

<script id="bar-options-template" type="text/template">
	<div id="bar-options" class="options-panel options-chart">
		<div class="options-header">Bar Chart</div>
		<div class="options">
			<div class="option">
				<div class="option-label">Key</div>
				<div class="option-value">
					<select id="key">
					<%% for (var index in attributes) { %>
						<option value="<%%= attributes[index].id %>"><%%= attributes[index].id %></option>
					<%% } %>
					</select>
				</div>
			</div>
			<div class="option">
				<div class="option-label">Value</div>
				<div class="option-value">
					<input id="value" />
				</div>
			</div>
		</div>
	</div>
</script>

<script id="time-options-template" type="text/template">
	<div id="time-options" class="options-panel options-secondary-chart">
		<div class="options-header">Time Options</div>
		<div class="options">	
			<div class="option">
				<div class="option-label">Group By</div>
				<div class="option-value">
					<select id="groupBy">
						<option value="hour">Hour</option>
						<option value="day">Day</option>
						<option value="date">Date</option>
						<option value="month">Month</option>
						<option value="year">Year</option>
					</select>
				</div>
			</div>
		</div>
	</div>
</script>

<script id="line-options-template" type="text/template">
	<div id="line-options" class="options-panel options-chart">
		<div class="options-header">Line Chart</div>
		<div class="options">
			<div class="option">
				<div class="option-label">Key</div>
				<div class="option-value">
					<input id="key" />
				</div>
			</div>
			<div class="option">
				<div class="option-label">Value</div>
				<div class="option-value">
					<input id="value" />
				</div>
			</div>
		</div>
	</div>
</script>

<script id="pie-options-template" type="text/template">
	<div id="pie-options" class="options-panel options-chart">
		<div class="options-header">Pie Chart</div>
		<div class="options">
			<div class="option">
				<div class="option-label">Key</div>
				<div class="option-value">
					<select id="key">
					<%% for (var index in attributes) { %>
						<option value="<%%= attributes[index].id %>"><%%= attributes[index].id %></option>
					<%% } %>
					</select>
				</div>
			</div>
			<div class="option">
				<div class="option-label">Value</div>
				<div class="option-value">
					<select id="value">
					<%% for (var index in attributes) { %>
						<option value="<%%= attributes[index].id %>"><%%= attributes[index].id %></option>
					<%% } %>
					</select>
				</div>
			</div>
		</div>
	</div>
</script>

<script id="geo-options-template" type="text/template">
	<div id="geo-options" class="options-panel options-chart">
		<div class="options-header">Geo Chart</div>
		<div class="options">
			<div class="option">
				<div class="option-label">Latitude</div>
				<div class="option-value">
					<select id="latitude">
					<%% for (var index in attributes) { %>
						<option value="<%%= attributes[index].id %>"><%%= attributes[index].id %></option>
					<%% } %>
					</select>
				</div>
			</div>
			<div class="option">
				<div class="option-label">Longitude</div>
				<div class="option-value">
					<select id="longitude">
					<%% for (var index in attributes) { %>
						<option value="<%%= attributes[index].id %>"><%%= attributes[index].id %></option>
					<%% } %>
					</select>
				</div>
			</div>
			<div class="option">
				<div class="option-label">Value</div>
				<div class="option-value">
					<select id="value">
					<%% for (var index in attributes) { %>
						<option value="<%%= attributes[index].id %>"><%%= attributes[index].id %></option>
					<%% } %>
					</select>
				</div>
			</div>
		</div>
	</div>
</script>


<script>

	var currentModel;
	var currentDataset;
	var generalOptions;
	var objectOptions;
	var chartOptions;

	// Taken from http://twitter.github.io/typeahead.js/examples/
	var substringMatcher = function(strs) {
	  return function findMatches(q, cb) {
	    var matches, substringRegex;
	 
	    // an array that will be populated with substring matches
	    matches = [];
	 
	    // regex used to determine if a string contains the substring `q`
	    substrRegex = new RegExp(q, 'i');
	 
	    // iterate through the pool of strings and for any string that
	    // contains the substring `q`, add it to the `matches` array
	    $.each(strs, function(i, str) {
	      if (substrRegex.test(str)) {
	        // the typeahead jQuery plugin expects suggestions to a
	        // JavaScript object, refer to typeahead docs for more info
	        matches.push({ value: str });
	      }
	    });
	 
	    cb(matches);
	  };
	};

	var Visualization = Backbone.Model.extend({
		
	    idAttribute: 'identifier',

		urlRoot: function() {

			return '/visualization/'

			/*if (!this.attributes.identifier) {
				return '/visualization';
			} else {
				return '/visualization/' + this.attributes.identifier;
			}*/

		},
		
		initialize: function() {

			this.on('change', this.updateOptions);
		
		},

		updateOptions: function() {
			
			// Send things to the server

		}

	});

	var Dataset = Backbone.Model.extend({

		urlRoot: function() {

			if (!this.attributes.identifier) {
				return '/dataset';
			} else {
				return '/dataset/' + this.attributes.identifier;
			}

		},

		initialize: function() {

			this.on('change', this.updateOptions);
		
		}

	});

	var GeneralOptions = Backbone.View.extend({

		el: '#options',

		initialize: function() {

			this.render();

		},
		
		// Render the filterTemplate within the filterAttribute div
		render: function() {
			
			// Create the template from our options
			var template = _.template($('#general-options-template').html(), {
				'identifier': currentModel.get('identifier'),
			});

			// Replate everything in the options panel
			$('#options').html(template);
			$('#general-options').show();
			$('#object').val(currentModel.get('object'));

			// Load the right editor
			this.changeObject();

		},

		// Events that the view responds to
		events: {

			'change #object'							: 'changeObject',
			'click #general-options div.options-header'	: 'showGenOptions'

		},

		showGenOptions: function() {

			$('.options').slideUp(function() {

				$('#general-options div.options').slideDown();

			});

		},

		changeObject: function() {

			// Get the selected type
			var object = $('#object').find(':selected').val();

			currentModel.set('object', object);

			// Open the Visualization panels
			if (object == 'visualization') {

				objectOptions = new VisualizationOptions();

			}

			if (object == 'text') {

				// Show the text sidebar editors

			}

		}

	});

	var VisualizationOptions = Backbone.View.extend({

		el: '#options',

		initialize: function() {
			this.render();
		},
		
		// Render the filterTemplate within the filterAttribute div
		render: function() {
			
			// Create the template from our options
			var template = _.template($('#visualization-options-template').html(), {});

			// Remove any items tagged with options-chart
			$('.options-chart').remove();

			// Also remove anything tagged options-object
			$('.options-object').remove();

			// Append to the options panel
			$('#options').append(template);
			$('#visualization-options').slideDown();

			$('#dataset').val(currentModel.get('dataset'));
			$('#chart').val(currentModel.get('chart_type'));

			// Load the right editors
			this.changeDataset();
			this.changeChart();

		},

		events: {

			'change #dataset'									: 'changeDataset',
			'change #chart'										: 'changeChart',
			'click #visualization-options div.options-header'	: 'showVizOptions'

		},

		showVizOptions: function() {

		},

		changeDataset: function() {

			var _this = this;

			// Get the selected type
			var dataset = $('#dataset').find(':selected').val();

			currentModel.set('dataset', dataset);

			// Attempt to preload data about the dataset
			var datasetModel = new Dataset({ 'identifier': dataset });
			datasetModel.fetch({

				success: function() {

					// Cache the current dataset
					currentDataset = datasetModel;

					// Call a chart change as well just in case
					_this.changeChart();

				}

			});


		},

		changeChart: function() {

			// Get the selected type
			var chart = $('#chart').find(':selected').val();

			currentModel.set('chart_type', chart);

			// Open the Visualization panels
			if (chart == 'bar') {

				graphOptions = new BarOptions();

			}

			if (chart == 'line') {

				graphOptions = new LineOptions();

			}		
			
			if (chart == 'pie') {

				graphOptions = new PieOptions();

			}	

			if (chart == 'geo') {

				graphOptions = new GeoOptions();

			}	

		}

	});

	var TimeOptions = Backbone.View.extend({

		el: '#options',

		initialize: function() {
			this.render();
		},

		render: function() {

			var template =  _.template($('#time-options-template').html());

			$('#options').append(template);
			console.log($('#time-options'));
			$('#time-options').slideDown();

		},

		events: {

			'change #groupBy'				: 'changeGroupBy'

		},

		changeGroupBy: function() {

			// IMPLEMENT THE FORMAT YOU WANT TO RECEIVE THIS IN

			$('#groupBy').val(); // THIS IS THE VALUE YOU WILL GET

		}

	})

	var BarOptions = Backbone.View.extend({

		el: '#options',

		initialize: function() {
			this.render();
		},
		
		// Render the filterTemplate within the filterAttribute div
		render: function() {
			
			// Parse the attributes to a valid JSON object
			var attrs = currentDataset.get('attrs');

			// Create the template from our options
			var template = _.template($('#bar-options-template').html(), { 'attributes': attrs });

			// Remove any items tagged with options-chart
			$('.options-chart').remove();

			// Append to the options panel
			$('#options').append(template);
			$('#bar-options').slideDown();

			// Create a string array of attributes that we can use for tags
			var attrs_arr = []
			for (var i in attrs) {
				attrs_arr.push(attrs[i].id);
			}

			// Set up autcompleting tags for the value
			$('#value').tagit({
				availableTags: attrs_arr
			});

			// Set the values of X and Y to the correct things
			var options = currentModel.get('chart_options');

			if (options != null) {
				
				$('#key').val(options['key'][0]);

				// Add in all the value tags
				if (options['value'] != null) {
					for (var i in options['value']) {
						$('#value').tagit('createTag', options['value'][i]);
					}	
				}

			}
			
			// Trigger the X and Y axis settings
			this.changeKey();
			this.changeValue();

		},

		events: {

			'change #key'						: 'changeKey',
			'change #value'						: 'changeValue'

		},

		changeKey: function() {

			var chart_options = currentModel.get('chart_options');

			if (!chart_options) {
				chart_options = {}
			}

			chart_options['key'] = [$('#key').val()];

			// Now look up if the key is a datetime
			console.log(currentDataset.get('attrs'));

			currentModel.set('chart_options', chart_options);

			var attributes = currentDataset.get('attrs');
			for (var i in attributes) {
				if (attributes[i]['id'] == chart_options['key'] &&
					attributes[i]['type'] == 'datetime') {
					var timeOptions = new TimeOptions();
					return;
				}
			}

			$('.options-secondary-chart').remove();


		},

		changeValue: function() {
			
			var chart_options = currentModel.get('chart_options');

			if (!chart_options) {
				chart_options = {}
			}		

			chart_options['value'] = $('#value').tagit('assignedTags');

			currentModel.set('chart_options', chart_options);

		}


	});

	var LineOptions = Backbone.View.extend({

		el: '#options',

		initialize: function() {
			this.render();
		},
		
		// Render the filterTemplate within the filterAttribute div
		render: function() {
			
			// Parse the attributes to a valid JSON object
			var attrs = currentDataset.get('attrs');

			// Create the template from our options
			var template = _.template($('#line-options-template').html(), { 'attributes': attrs });

			// Remove any items tagged with options-chart
			$('.options-chart').remove();

			// Append to the options panel
			$('#options').append(template);
			$('#line-options').slideDown();

			// Create a string array of attributes that we can use for tags
			var attrs_arr = []
			for (var i in attrs) {
				attrs_arr.push(attrs[i].id);
			}

			// Set up autocompleting tags for the key
			$('#key').tagit({
				availableTags: attrs_arr
			});

			// Set up autcompleting tags for the value
			$('#value').tagit({
				availableTags: attrs_arr
			});

			// Set the values of X and Y to the correct things
			var options = currentModel.get('chart_options');

			if (options != null) {

				// Add in all the key tags if they exist
				if (options['key'] != null) {
					for (var i in options['key']) {
						$('#key').tagit('createTag', options['key'][i]);
					}				
				}

				// Add in all the value tags
				if (options['value'] != null) {
					for (var i in options['value']) {
						$('#value').tagit('createTag', options['value'][i]);
					}	
				}

			}

			// Trigger the X and Y axis settings
			this.changeKey();
			this.changeValue();

		},

		events: {

			'change #key'						: 'changeKey',
			'change #value'						: 'changeValue'

		},

		changeKey: function() {

			var chart_options = currentModel.get('chart_options');

			if (!chart_options) {
				chart_options = {}
			}

			chart_options['key'] = $('#key').tagit('assignedTags');

			currentModel.set('chart_options', chart_options);

		},

		changeValue: function() {
			
			var chart_options = currentModel.get('chart_options');

			if (!chart_options) {
				chart_options = {}
			}		

			chart_options['value'] = $('#value').tagit('assignedTags');

			currentModel.set('chart_options', chart_options);

		}


	});

	var PieOptions = Backbone.View.extend({

		el: '#options',

		initialize: function() {
			this.render();
		},
		
		// Render the filterTemplate within the filterAttribute div
		render: function() {
			
			// Parse the attributes to a valid JSON object
			var attrs = currentDataset.get('attrs');

			// Create the template from our options
			var template = _.template($('#pie-options-template').html(), { 'attributes': attrs });

			// Remove any items tagged with options-chart
			$('.options-chart').remove();

			// Append to the options panel
			$('#options').append(template);
			$('#pie-options').slideDown();

			// Create a string array of attributes that we can use for tags
			var attrs_arr = []
			for (var i in attrs) {
				attrs_arr.push(attrs[i].id);
			}

			// Set the values of X and Y to the correct things
			var options = currentModel.get('chart_options');

			if (options != null) {

				$('#key').val(options['key'][0]);
				$('#value').val(options['value'][0]);

			}

			// Trigger the X and Y axis settings
			this.changeKey();
			this.changeValue();

		},

		events: {

			'change #key'						: 'changeKey',
			'change #value'						: 'changeValue'

		},

		changeKey: function() {

			var chart_options = currentModel.get('chart_options');

			if (!chart_options) {
				chart_options = {}
			}

			chart_options['key'] = [$('#key').val()];

			currentModel.set('chart_options', chart_options);

		},

		changeValue: function() {
			
			var chart_options = currentModel.get('chart_options');

			if (!chart_options) {
				chart_options = {}
			}		

			chart_options['value'] = [$('#value').val()];

			currentModel.set('chart_options', chart_options);

		}


	});

	var GeoOptions = Backbone.View.extend({

		el: '#options',

		initialize: function() {
			this.render();
		},
		
		// Render the filterTemplate within the filterAttribute div
		render: function() {
			
			// Parse the attributes to a valid JSON object
			var attrs = currentDataset.get('attrs');

			// Create the template from our options
			var template = _.template($('#geo-options-template').html(), { 'attributes': attrs });

			// Remove any items tagged with options-chart
			$('.options-chart').remove();

			// Append to the options panel
			$('#options').append(template);
			$('#geo-options').slideDown();

			// Create a string array of attributes that we can use for tags
			var attrs_arr = []
			for (var i in attrs) {
				attrs_arr.push(attrs[i].id);
			}

			// Set the values of X and Y to the correct things
			var options = currentModel.get('chart_options');

			if (options != null) {

				$('#latitude').val(options['latitude'][0]);
				$('#longitude').val(options['longitude'][0]);
				$('#value').val(options['value'][0]);

			}

			// Trigger the X and Y axis settings
			this.changeLatitude();
			this.changeLongitude();
			this.changeValue();

		},

		events: {

			'change #latitude'						: 'changeLatitude',
			'change #longitude'						: 'changeLongitude',
			'change #value'							: 'changeValue'

		},

		changeLatitude: function() {

			var chart_options = currentModel.get('chart_options');

			if (!chart_options) {
				chart_options = {}
			}

			chart_options['latitude'] = [$('#latitude').val()];

			currentModel.set('chart_options', chart_options);

		},

		changeLongitude: function() {

			var chart_options = currentModel.get('chart_options');

			if (!chart_options) {
				chart_options = {}
			}

			chart_options['longitude'] = [$('#longitude').val()];

			currentModel.set('chart_options', chart_options);		

		},

		changeValue: function() {
			
			var chart_options = currentModel.get('chart_options');

			if (!chart_options) {
				chart_options = {}
			}		

			chart_options['value'] = [$('#value').val()];

			currentModel.set('chart_options', chart_options);

		}

	});

	var container = document.querySelector('#page');
	var packery = new Packery(container, {
		gutter: 20,
		columnWidth: 220
	});

	var itemElems = packery.getItemElements();
	for (var i = 0, len = itemElems.length; i < len; i++) {
		var elem = itemElems[i];
		var draggable = new Draggabilly(elem, {
			handle: '.visualization-handle'
		});
		draggable.on('dragEnd', evaluateEvent);
		packery.bindDraggabillyEvents(draggable);
	}

	$('#create').click(function() {

		// Create a new element
		var elem = document.createElement('div');
		elem.className = 'visualization';
		elem.style.width = 940 + 'px';
		elem.style.height = 500 + 'px';

		// Create the handle
		var handle = document.createElement('div');
		handle.className = 'visualization-handle';
		handle.innerHTML = '<i class="fa fa-arrows"></i>';

		// Put the handle in
		elem.appendChild(handle);

		// Create a writing area
		/*var editor = document.createElement('div');
		editor.className = 'text-editor';
		elem.appendChild(editor);*/

		// Put it inside the container
		container.appendChild(elem);

		// Add to Packery
		packery.appended(elem);

		// Create a new Visualization object
		var visualization = new Visualization();

		// Attempt to save it
		visualization.save({worksheet: '<%= @worksheet.identifier %>' }, {

			success: function(model, response) {
			
				// Set the id 
				elem.id = response.identifier;

				// Simulation of a visualization click event
				clickVisualization(elem);
		
			},

			error: function(model, response) {

			}

		});

		// Activate Draggabilly on it
		var draggable = new Draggabilly(elem, {
			handle: '.visualization-handle'
		});
		draggable.on('dragStart', startEvent);
		draggable.on('dragEnd', evaluateEvent);
		packery.bindDraggabillyEvents(draggable);

	});

	$('#save').click(function() {

		currentModel.save(null, {

			success: function(model, response) {

				// Create an iFrame
				var frame = $('<iframe />').attr('src', '/visualization/' + currentModel.get('identifier') + '/view').attr('frameBorder', '0'); 

				// Load an IFRAME
				$('#' + currentModel.get('identifier')).html(frame);

			},

			error: function(model, response) {


				console.log('error');

				console.log(model);

				console.log(response);
			}

		});

	});

	$('#delete').click(function() {

		// Remove from Packery
		packery.remove(document.getElementById(currentModel.get('identifier')));
		packery.layout();

		// Destroy the current model
		currentModel.destroy({

			success: function() {
			
				currentModel = null;
			
			},

			error: function() {
			
				console.log('failure')
			
			}

		});

	});

	function startEvent(draggable) {

		setSelection(draggable.element);

	}

	function setSelection(element) {

		// First deselect all
		deselectAll();

		// Toggle the selected class for the visualization in question
		$(element).toggleClass('selected');

	}

	// Evaluates the dragging of a worksheet item
	function evaluateEvent(draggable) {

		var dragPoint = draggable.dragPoint;

		// Corresponds to a click event
		if (dragPoint.x === 0 && dragPoint.y === 0) {

			clickVisualization(draggable.element);

		} 

		// Corresponds to a drag event
		else {



		}

	}

	function clickVisualization(element) {

		// Set the selection
		setSelection(element);

		// Load the sidebar
		loadSidebar(element);

	}

	function loadSidebar(element) {

		// Get the identifier of the element
		var identifier = element.id;

		// Attempt to fetch the model
		var model = new Visualization({ 'identifier': identifier });
		model.fetch({

			success: function() {

				// Unload listeners
				unloadListeners();

				// Set the current model to the model we just retrieved
				currentModel = model;

				// Convert the chart_options from a string to a JSON object
				var chart_options = currentModel.get('chart_options');

				// Set the chart options to a Javascript object
				currentModel.set('chart_options', jQuery.parseJSON(chart_options));

				// Set the worksheet identifier
				currentModel.set('worksheet_id', '<%= @worksheet.identifier %>');


				// Create a new instance of the general options view
				generalOptions = new GeneralOptions();

			}

		});

	}

	function unloadListeners() {

		// Unload if exists
		if (generalOptions) {
			generalOptions.undelegateEvents();
		}
		if (objectOptions) {
			objectOptions.undelegateEvents();
		}
		if (chartOptions) {
			chartOptions.undelegateEvents();
		}

	}

	function loadVisualizationSidebar() {



	}

	function loadLineSidebar() {

		// Remove sidebars that correspond to other data types
		removeChartSidebars();
		
		// Load our new sidebar in


	}

	function deselectAll() {

		$('.visualization').each(function() {
			$(this).removeClass('selected');
		});

	}

</script>