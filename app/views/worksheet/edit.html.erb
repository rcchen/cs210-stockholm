<div id="workspace">
	<div id="sidebar">
		<button id="create" class="btn btn-success">Create</button>
	</div>
	<div id="options">
		<div id="options-general" class="options-panel">
			<div class="options-header">General</div>
			<div class="option">
				<div class="option-label">Identifier</div>
				<div class="option-value">
					<input id="identifier" type="text" disabled />
				</div>
			</div>
			<div class="option">
				<div class="option-label">Object</div>
				<div class="option-value">
					<select id="object">
						<option value="text">Text</option>
						<option value="barchart">Visualization</option>
					</select>
				</div>
			</div>
		</div>
		<div id="options-visualization" class="options-panel">
			<div class="options-header">Visualization</div>
			<div class="option">
				<div class="option-label">Dataset</div>
				<div class="option-value">
					<select id="dataset">
						<%= @datasets.each do |dataset| %>
						<option value="<%= dataset.identifier %>"><%= dataset.name %></option>
						<% end %>
					</select>
				</div>
			</div>
			<div class="option">
				<div class="option-label">Type</div>
				<div class="option-value">
					<select id="type">
						<option value="bar">Bar</option>
						<option value="pie">Pie</option>
						<option value="line">Line</option>
						<option value="geo">Geospatial</option> 
					</select>
				</div>
			</div>
			<div class="option">
				<div class="option-label">X-Axis</div>
				<div class="option-value">
					<input id="xaxis" type="text" />
				</div>
			</div>
			<div class="option">
				<div class="option-label">Y-Axis</div>
				<div class="option-value">
					<input id="yaxis" type="text" />
				</div>
			</div>
		</div>
		<div id="options-buttons" class="options-panel">
			<div class="options-header">Buttons</div>
			<div class="option">
				<button id="save" class="btn btn-success">Save</button>
			</div>
		</div>
	</div>
	<div id="worksheet">
		<div id="page-container">
			<div id="page"></div>
		</div>
	</div>
</div>


<script>

	function randomNumber(high) {
		return Math.floor((Math.random()*high)+1);
	}

	var current;

	var Visualization = Backbone.Model.extend({
		
		urlRoot: function() {

			if (!this.attributes.identifier) {
				return '/visualization';
			} else {
				return '/visualization/' + this.attributes.identifier;
			}

		},
		
		initialize: function() {

			this.on('change', this.updateOptions);
		
		},

		updateOptions: function() {
			
			// Send things to the server
			// this.save();

		}

	});

	var container = document.querySelector('#page');
	var packery = new Packery(container, {
		gutter: 20,
		columnWidth: 220,
		rowHeight: 200
	});

	var itemElems = packery.getItemElements();
	for (var i = 0, len = itemElems.length; i < len; i++) {
		var elem = itemElems[i];
		var draggable = new Draggabilly(elem);
		draggable.on('dragEnd', evaluateEvent);
		packery.bindDraggabillyEvents(draggable);
	}

	$('#create').click(function() {

		var rand = randomNumber(4);

		var genWidth = 220 * rand + 20 * (rand - 1);
		var genHeight = 200 * rand + 20 * (rand - 1);

		// Create a new element
		var elem = document.createElement('div');
		elem.className = 'visualization';
		elem.style.width = 220 + 'px';
		elem.style.height = 200 + 'px';

		// Put it inside the container
		container.appendChild(elem);

		// Add to Packery
		packery.appended(elem);

		// Create a new Visualization object
		var visualization = new Visualization();

		// Attempt to save it
		visualization.save({worksheet: '<%= @worksheet.identifier %>' }, {

			success: function(model, response) {
			
				// Set the id 
				elem.id = response.identifier;

				// Simulation of a visualization click event
				clickVisualization(elem);
		
			},

			error: function(model, response) {

			}

		});

		// Activate Draggabilly on it
		var draggable = new Draggabilly(elem);
		draggable.on('dragStart', startEvent);
		draggable.on('dragEnd', evaluateEvent);
		packery.bindDraggabillyEvents(draggable);

	});

	$('#object').change(function() {

		// Get the selected type
		var object = $(this).find(':selected').val();

		// Open the Visualization panels
		if (object == 'visualization') {

			// Show the visualization sidebar editors
			loadVisualizationSidebar();

		}

		if (object == 'text') {

			// Show the text sidebar editors

		}

	});

	$('#dataset').change(function() {

		// Get the selected dataset
		var dataset = $(this).find(':selected').val();

		// Save it to the current object
		current.set('dataset', dataset);

	});

	$('#type').change(function() {

		// Get the selected dataset
		var type = $(this).find(':selected').val();

		// Save it to the current object
		current.set('chart_type', type);

	});

	$('#save').click(function() {

		current.save();

	});

	function startEvent(draggable) {

		setSelection(draggable.element);

	}

	function setSelection(element) {

		// First deselect all
		deselectAll();

		// Toggle the selected class for the visualization in question
		$(element).toggleClass('selected');

	}

	function evaluateEvent(draggable) {

		var dragPoint = draggable.dragPoint;

		// Corresponds to a click event
		if (dragPoint.x === 0 && dragPoint.y === 0) {

			clickVisualization(draggable.element);

		} 

		// Corresponds to a drag event
		else {



		}

	}

	function clickVisualization(element) {

		// Set the selection
		setSelection(element);

		// Load the sidebar
		loadSidebar(element);

	}

	function loadSidebar(element) {

		// Get the identifier of the element
		var identifier = element.id;

		// Attempt to fetch the model
		var model = new Visualization({ 'identifier': identifier });
		model.fetch({

			success: function() {

				$('#identifier').val(model.attributes.identifier);
				current = model;

			}

		});

	}

	function loadVisualizationSidebar() {



	}

	function deselectAll() {

		$('.visualization').each(function() {
			$(this).removeClass('selected');
		});

	}

</script>