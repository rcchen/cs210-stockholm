<div class="container">
	<ol class="breadcrumb">
	  <li><a href="/users/profile">Profile</a></li>
	  <li class="active"><%= @dataset.name %></li>
	</ol>
	<h3><%= @dataset.name %></h3>
	<% if @dataset.expected_count.nil? or @dataset.datadocs.count < @dataset.expected_count %>
	<div class="alert alert-info">This dataset is still currently processing. Please check back later to see if it is done before processing any visualizations.</div>
	<% end %>
	<div id="information" style="margin: 30px 0px;">
		<div class="row">
			<div class="col-xs-6">
				<table class="table">
					<tr>
						<td>Records</td>
						<td><%= @dataset.datadocs.count %></td>
					</tr>
					<tr>
						<td>Created</td>
						<td><%= @dataset.created_at %></td>
					</tr>
					<tr>
						<td>Last Updated</td>
						<td><%= @dataset.updated_at %></td>
					</tr>
					<tr>
						<td>Expected Count</td>
						<td><%= @dataset.expected_count %></td>
					</tr>
					<tr>
						<td>Endpoint (JSON)</td>
						<td><a href="/api/<%= @dataset.identifier %>">/api/<%= @dataset.identifier %></a></td>
					</tr>
				</table>
			</div>
			<div class="col-xs-6">
				<pre id="attributes"><%= JSON.pretty_generate(@dataset.attrs) %></pre>
			</div>
		</div>
	</div>
	<div id="filters" style="margin-top: 40px;">
		<h3>Data</h3>
		<form id="filters-form">
			<div id="filter-attributes">
			</div>
			<div id="filter-actions" style="margin: 20px 0px;">
				<button type="button" class="btn btn-success" id="add-filter">Add Filter</button>
				<button type="button" class="btn btn-primary" id="submit-filter">Submit</button>
			</div>
		</form>
	</div>
	<div id="table">
		<table class="table" style="margin-bottom: 80px; overflow: scroll; max-width: 960px; ">
			<thead>
				<tr>
				<% @dataset.attrs.each do |attrHash| %>
				<th><%=  attrHash["id"] %></th>
				<% end %>				
				</tr>
			</thead>
			<tbody id="table-data"></tbody>
		</table>
	</div>
</div>
<script id="filterTemplate" type="text/template">
	<div class="form-attribute" style="margin: 10px 0px;">
		<div class="row">
			<div class="col-xs-5">
				<select class="form-control" name="attribute">
					<% @dataset.attrs.each do |attrHash| %>
					<option><%= attrHash["id"] %></option>
					<% end %>
				</select>
			</div>
			<div class="col-xs-3">
				<select class="form-control" name="sign">
					<option value="<">less than (<)</option>
					<option value="<=">less than or equal (<=)</option>
					<option value="=">equals (=)</option>
					<option value=">=">greater than or equal (>=)</option>
					<option value=">">greater than (>)</option>
					<option value="Contains">contains </option>
				</select>
			</div>	
			<div class="col-xs-3">
				<input class="form-control" name="value" />
			</div>
			<div class="col-xs-1">
				<button type="button" class="btn btn-danger filter-remove">Remove</button>
			</div>
		</div>
	</div>
</script>
<script id="dataTemplate" type="text/template">
	<tr>
	<@ console.log(c); @>
	<@ for (var ind = 0; ind < c.length; ind++) { @>
		<td>
			<@= c[ind]["v"] @>
		</td>
	<@ } @>
	</tr>
</script>
<script>

	// Eliminate conflicts with Rails
	_.templateSettings = {
	    interpolate: /\<\@\=(.+?)\@\>/gim,
	    evaluate: /\<\@(.+?)\@\>/gim,
	    escape: /\<\@\-(.+?)\@\>/gim
	};
	
	// Establish a Backbone data model
	var DataModel = Backbone.Model.extend();

	// Backbone collection that represents our model
	var DataSet = Backbone.Collection.extend({
		model: DataModel,
		url: '#',
		initialize: function() { }
	});

	// Represents each row of data in the grid
	var DataView = Backbone.View.extend({

		// The id that we are targeting is table-data
		el: "#table-data",

		// The template that this is backed by is dataTemplate
		template: _.template($('#dataTemplate').html()),

		// Used to render each row of the data table 
 		render: function(eventName) {
		
 			// Loops through all of our models
			_.each(this.model.models, function(data) {
				// Render the data for each model in the template
				var dataTemplate = this.template(data.toJSON());
				$(this.el).append(dataTemplate);

			}, this);
			return this;
		}

	});

	// Used to load additional filters on the fly
	var FilterView = Backbone.View.extend({

		// Renders the filter view on initialization
		initialize: function() {
			this.render();
		},
		
		// Render the filterTemplate within the filterAttribute div
		render: function() {
			var template = _.template($('#filterTemplate').html(), {});
			$('#filter-attributes').append(template);
		}

	});
	
	// Handles everything related to the table on the page
	var AppView = Backbone.View.extend({

		// AppView targets the body element
		el: "body",

		// Backbone is event-driven, so register them here
		events: {

			// Clicking on the submit filter will update data
			'click #submit-filter': 'updateData'

		},

		// Initializer for this Backbone view
		initialize: function() {

			// We use this pattern so we have a references to the parent obj
			var _this = this;

			// Instance of the model collection
			this.dataset = new DataSet();

			// Instance of the model view backed by the collection
			this.datasetView = new DataView({
				model: _this.dataset
			});

			// When the dataset is reset, we want to rerender the view
			this.dataset.bind('reset', function() {
				_this.datasetView.render();
			});

		},

		// Responsible for taking data from the filters and 
		updateData: function() {

			// Getting a reference to the parent object
			var _this = this;

			// Store all the filters in this array
			var submissions = [];

			// Serialize the form data
			var filters = $('#filters-form').serializeArray();

			// Each filter is an object to make our lives easier
			var filter = new Object();

			// Go through each of the filters and create objects
			for (var i = 0; i < filters.length; i++) {

				// Filters are in groups of three objects
				if (i % 3 == 0 && i != 0) {
					submissions.push(filter);
					filter = new Object();
				}

				// Set the object attributes
				var attribute = filters[i];
				filter[attribute.name] = attribute.value;

			} 

			// Add the last filter into the array
			submissions.push(filter);

			// POST request to the server with the filters
			$.post('/api/<%= @dataset.identifier %>', {filters: submissions}, function(data) {

				// Empty out the target DOM
				document.getElementById('table-data').innerHTML = "";

				// Call a reset on the data collection with our new data
				// Will trigger a rerender of the view
				_this.dataset.reset(data["rows"]);

			}); 

		}

	});
	
	// Gets everything started
	var App = new AppView;

	$('#add-filter').click(function() {
		new FilterView();
	});

	$('.filter-remove').live('click', function() {
		$(this).parent().parent().parent().remove();
		event.preventDefault();
	});

</script>