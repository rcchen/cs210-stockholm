<h3 id="title"></h3>
<div id="visualization-preview"></div>
<!--<script>

  var w = window;
  var e = document.documentElement;
  var g = document.getElementsByTagName('body')[0]

  var x = w.innerWidth || e.clientWidth || g.clientWidth;
  var y = w.innerHeight|| e.clientHeight|| g.clientHeight;

  function visualizeObject(type, params, identifier, data_filters, x, y) {

    // Add an SVG element to the data area
    $('#visualization-preview').html('<svg width="800px" height="450px"></svg>');
    $('#visualization-preview svg').attr("width", x + "px");
    $('#visualization-preview svg').attr("height", y + "px");

    if (type == 'line') {

        var params_key = params[0]['value'];
        var params_value = params[1]['value'];   

        $.post('/api/' + identifier, { filters: data_filters, chart: "line", key: params_key, aggregate: params_value }, function(data) {            

            nv.addGraph(function() {
              var chart = nv.models.lineChart()
                            .margin({left: 100})  //Adjust chart margins to give the x-axis some breathing room.
                            .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                            .transitionDuration(350)  //how fast do you want the lines to transition?
                            .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
                            .showYAxis(true)        //Show the y-axis
                            .showXAxis(true)        //Show the x-axis
              ;
             
              /*chart.xAxis     //Chart x-axis settings
                  .axisLabel('Time (ms)')
                  .tickFormat(d3.format(',r'));
             
              chart.yAxis     //Chart y-axis settings
                  .axisLabel('Voltage (v)')
                  .tickFormat(d3.format('.02f'));
              */
              d3.select('#visualization-preview svg')    //Select the <svg> element you want to render the chart in.   
                  .datum(data)         //Populate the <svg> element with chart data...
                  .call(chart);          //Finally, render the chart!
             
              //Update the chart when window resizes.
              nv.utils.windowResize(function() { chart.update() });
              return chart;
            });

        });

    }

    if (type == 'pie') {

        var params_key = params[0]['value'];
        var params_value = params[1]['value'];

        $.post('/api/' + identifier, { filters: data_filters, chart: "pie", key: params_key, aggregate: params_value }, function(data) {
            //Donut chart example
            nv.addGraph(function() {
              var chart = nv.models.pieChart()
                  .x(function(d) { return d.label })
                  .y(function(d) { return d.value })
                  .showLabels(true)     //Display pie labels
                  .labelThreshold(.05)  //Configure the minimum slice size for labels to show up
                  .labelType("percent") //Configure what type of data to show in the label. Can be "key", "value" or "percent"
                  .donut(true)          //Turn on Donut mode. Makes pie chart look tasty!
                  .donutRatio(0.35)     //Configure how big you want the donut hole size to be.
                  ;
                d3.select("#visualization-preview svg")
                    .datum(data)
                    .transition().duration(350)
                    .call(chart);
              return chart;
            });
        });

    }

    if (type == 'bar') {

        var params_key = params[0]['value'];
        var params_value = params[1]['value'];

        $.post('/api/' + identifier, { filters: data_filters, chart: "bar", key: params_key, aggregate: params_value }, function(data) {
            //Discrete chart example
            nv.addGraph(function() {
              var chart = nv.models.discreteBarChart()
                  .x(function(d) { return d.label })
                  .y(function(d) { return d.value })
                  .staggerLabels(false)     // Stagger bar chart labels
                  .tooltips(true)  //Configure the minimum slice size for labels to show up
                  .showValues(false)   // Show bar value on top of bar
                  ;
              //chart.xAxis.axisLabel(params_key);
             
                d3.select("#visualization-preview svg")
                    .datum(data)
                    .transition().duration(350)
                    .call(chart);
              return chart;
            });
        });
      }

      if (type == 'geo') {

        var params_key = params[0]['value'];
        var params_value = params[1]['value'];

        // Send accross our POST request
        $.post('/api/' + identifier, { filters: data_filters, chart: "geo", key: params_key, aggregate: params_value }, function(data) {

            // Get the center of the data
            var center_lat = 0;
            var center_lng = 0;
            for (var i = 0; i < data.length; i++) {
                center_lat += data[i].latitude;
                center_lng += data[i].longitude;
            } center_lat /= data.length;
            center_lng /= data.length;

            // Create the GMaps object
            map = new GMaps({
                el: '#visualization-preview',
                lat: center_lat,
                lng: center_lng,
                zoomControl : true,
                zoom: 8,
                zoomControlOpt: {
                    style : 'SMALL',
                    position: 'TOP_LEFT'
                }
            });
       
            for (var i = 0; i < data.length; i++) {

                // Get the data coordinate
                var coordinate = data[i];

                map.addMarker({
                    lat: coordinate.latitude,
                    lng: coordinate.longitude
                });
                
            }

        });
      }
    }

  var chartType = '<%= @visualization.chart_type %>';
  var chartOptions = JSON.parse('<%= raw @visualization.chart_options %>');
  var dataset = '<%= @visualization.dataset %>';
  var filters = JSON.parse('<%= raw @visualization.filters %>');

  $(window).load(function() {

    console.log('js loaded');
    visualizeObject(chartType, chartOptions, dataset, filters, x, y);
  });


  function getSize(){

    x = w.innerWidth || e.clientWidth || g.clientWidth;
    y = w.innerHeight|| e.clientHeight|| g.clientHeight;

  }

  window.onresize = visualizeObject(chartType, chartOptions, dataset, filters, x, y);

</script>-->