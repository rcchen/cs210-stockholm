<div class="container">
    <div id="steps">
        <div class="stepwizard">
            <div class="stepwizard-row">
                <div class="stepwizard-step">
                    <button id="step1-button" type="button" class="btn btn-primary btn-circle">1</button>
                    <p>Dataset</p>
                </div>
                <div class="stepwizard-step">
                    <button id="step2-button" type="button" class="btn btn-default btn-circle">2</button>
                    <p>Filters</p>
                </div>
                <div class="stepwizard-step">
                    <button id="step3-button" type="button" class="btn btn-default btn-circle" disabled="disabled">3</button>
                    <p>Visualization</p>
                </div> 
            </div>
        </div>
    </div>
    <div id="current">

    </div>
</div>

<!-- This is responsible for the first step, selecting a dataset -->
<script id="dataset-template" type="text/template">
    <div class="row">
        <div class="col-md-6">
            Select an existing dataset.
            <select name="dataset" id="step1-dataset" class="form-control">
            <% @user.datasets.each do |dataset| %>
                <option value="<%= dataset.identifier %>"><%= dataset.name %></option>
            <% end %>
            </select>
        </div>
        <div class="col-md-6">
            <div class="dataset-container">
                Create a new dataset by dragging a file here.
            </div>
        </div>
    </div>
    <button role="button" class="btn btn-primary" id="step2">Continue</button>
</script>

<!-- This is responisble for the second step, figuring out what data to visualize -->
<script id="filters-template" type="text/template">
    <form id="filters-form">
        <div id="filter-attributes">
        </div>
        <div id="filter-actions" style="margin: 20px 0px;">
            <button type="button" class="btn btn-success" id="add-filter">Add Filter</button>
            <button type="button" class="btn btn-primary" id="preview-filter">Preview</button>
        </div>
    </form>
    <button role="button" class="btn btn-primary" id="step3">Continue</button>
</script>

<!-- This is a filter that can be added in the second step -->
<script id="filter-template" type="text/template">
    <div class="form-attribute" style="margin: 10px 0px;">
        <div class="row">
            <div class="col-xs-5">
                <select class="form-control" name="attribute">
                    <@ for (var attr in jQuery.parseJSON(attrs)) { @>
                        <option><@= attr @></option>
                    <@ } @>
                </select>
            </div>
            <div class="col-xs-3">
                <select class="form-control" name="sign">
                    <option value="<">less than (<)</option>
                    <option value="<=">less than or equal (<=)</option>
                    <option value="=">equals (=)</option>
                    <option value=">=">greater than or equal (>=)</option>
                    <option value=">">greater than (>)</option>
                </select>
            </div>  
            <div class="col-xs-3">
                <input class="form-control" name="value" />
            </div>
            <div class="col-xs-1">
                <button type="button" class="btn btn-danger remove-filter">Remove</button>
            </div>
        </div>
    </div>
</script>

<!-- This is responsible for the third step, creating the visualization -->
<script id="visualization-template" type="text/template">
    <div class="row">
        <div class="col-md-9">
            <div id="visualization-preview"></div>
        </div>
        <div class="col-md-3">
            <div id="visualization-items">
                <div id="visualization-choices">
                    <%= image_tag "icons/table.png", {:id => 'table', :class => 'visualization-choice selected-choice'} %>
                    <%= image_tag "icons/bar_graph.png", {:id => 'bar', :class => 'visualization-choice'} %>
                    <%= image_tag "icons/line_graph.png", {:id => 'line', :class => 'visualization-choice'} %>
                    <%= image_tag "icons/pie_chart.png", {:id => 'pie', :class => 'visualization-choice'} %>
                </div>
                <div id="visualization-options">
                    <div class="form-group">
                        <label for="key">Key</label>
                        <select class="form-control" name="key">
                        <@ for (var attr in jQuery.parseJSON(dataset.attrs)) { @>
                            <option><@= attr @></option>
                        <@ } @>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="aggregate">Aggregate</label>
                        <select class="form-control" name="aggregate">
                        <@ for (var attr in jQuery.parseJSON(dataset.attrs)) { @>
                            <option><@= attr @></option>
                        <@ } @>
                        </select>
                    </div>
                </div>
                <button type="button" id="visualization-preview" class="btn btn-primary">Preview</button>
            </div>
        </div>
    </div>
</script>

<!-- This is responsible for the table preview -->
<script id="visualization-table" type="text/template">
    <table class="table">
        <thead>
            <tr>
            <@ for (var attr in jQuery.parseJSON(attrs)) { @>
                <th><@= attr @></th>
            <@ } @>
            </tr>
        </thead>
        <tbody id="table-rows">

        </tbody>
    </table>
</script>

<!-- Responsible for each row of the table -->
<script id="table-row" type="text/template">
    <tr>
        <@ for (var attr in jQuery.parseJSON(collection.datasetAttributes.attrs)) { @>
        <td><@= attributes[attr] @></td>
        <@ } @>
    </tr>
</script>

<script>

    // Eliminate conflicts with Rails
    _.templateSettings = {
        interpolate: /\<\@\=(.+?)\@\>/gim,
        evaluate: /\<\@(.+?)\@\>/gim,
        escape: /\<\@\-(.+?)\@\>/gim
    };

    var Visualization = Backbone.Model.extend({

    });

    var Filter = Backbone.Model.extend({

    });

    // Responsible for the first step view
    var DatasetView = Backbone.View.extend({
        el: "#current",
        template: _.template($('#dataset-template').html()),
        render: function() {
            $(this.el).html(this.template);
        }
    });

    // Responsible for the second step view
    var FiltersView = Backbone.View.extend({
        el: "#current",
        template: _.template($('#filters-template').html()),
        render: function() {
            $(this.el).html(this.template);
        }
    });

    // Each individual filter partial
    var FilterView = Backbone.View.extend({
        el: "#filter-attributes",
        template: _.template($('#filter-template').html()),
        render: function() {
            $(this.el).append(this.template(this.model.get('dataset')));
        }
    });

    // Responsible for the third step view
    var VisualizationView = Backbone.View.extend({
        el: "#current",
        template: _.template($('#visualization-template').html()),
        render: function() {
            $(this.el).html(this.template(this.model.toJSON()));
        }
    });

    var TableRowModel = Backbone.Model.extend();

    var TableRowCollection = Backbone.Collection.extend({
        model:TableRowModel,
        url: '#',
        initialize: function(models, options) { 
            options || (options = {});
            if (options.datasetAttributes) {
                this.datasetAttributes = options.datasetAttributes;
            }
        }
    });

    // Responsible for a table view
    var TableRowView = Backbone.View.extend({

        // The ID we are targeting in the table
        el: "#table-rows",

        // Template that backs each row
        template: _.template($('#table-row').html()),

        // Render function
        render: function() {

            // Loop through all the models
            _.each(this.model.models, function(data) {
                var tableRow = this.template(data);
                console.log(data.toJSON());
                console.log(tableRow);
                $(this.el).append(tableRow);
            }, this);

            // Return the TableRowView
            return this;

        }

    });

    var TableView = Backbone.View.extend({
        el: "#visualization-preview",
        template: _.template($('#visualization-table').html()),
        render: function() {
            $(this.el).html(this.template(this.model));
        }
    });

    // Handles the entire interaction on the page
    var AppView = Backbone.View.extend({

        // AppView targets the body element
        el: "body",

        events: {
            "click #add-filter":            "addFilter",
            "click #preview-filter":        "previewFilter",  
            "click .remove-filter":         "removeFilter", 
            "click #step2":                 "step2",
            "click #step3":                 "step3", 
            "click .visualization-choice":  "setVisualizationType",
            "click #visualization-preview": "previewVisualization", 
        },

        // Initializer for this Backbone view
        initialize: function() {

            // Get a reference to the parent object
            var _this = this;

            // Initialize the model backing this view
            this.visualization = new Visualization();

            // Create instances of all the views we need
            this.datasetView = new DatasetView();
            this.filtersView = new FiltersView();
            this.visualizationView = new VisualizationView();

            // Render the default view
            this.datasetView.render();

        },

        // Method for adding new filters
        addFilter: function() {

            // Get a reference to the parent object
            var _this = this;

            // Render the filter view
            var filterView = new FilterView({
                model: _this.visualization
            });

            filterView.render();

        },

        // Method for previewing the data encapsulated by the feature set
        previewFilter: function() {

            // Get a reference to the parent object
            var _this = this;

            // Store all the filters in this array
            var submissions = [];

            // Serialize the form data
            var filters = $('#filters-form').serializeArray();

            // Each filter is an object to make our lives easier
            var filter = new Object();

            // Go through each of the filters and create objects
            for (var i = 0; i < filters.length; i++) {

                // Filters are in groups of three objects
                if (i % 3 == 0 && i != 0) {
                    submissions.push(filter);
                    filter = new Object();
                }

                // Set the object attributes
                var attribute = filters[i];
                filter[attribute.name] = attribute.value;

            } 

            // Add the last filter into the array
            submissions.push(filter);

        },

        // Method for removing filters that are no longer needed
        removeFilter: function(ev) {

            // Find the parent view
            var parentView = $(ev.target).closest('.form-attribute');

            // Remove it
            parentView.remove();

        },

        // Method for moving to step 2
        step2: function() {

            // Get a reference to the parent object
            var _this = this;

            // Get the selected item
            var endpoint = $('#step1-dataset').val();

            // Make a GET request for the attributes
            $.getJSON('/api/' + endpoint, function(data) {

                // Set the dataset in our model
                _this.visualization.set("dataset", data);

            });

            // Fix the active things on the top
            $('#step1-button').removeClass('btn-primary');
            $('#step1-button').addClass('btn-default');
            $('#step2-button').removeClass('btn-default');
            $('#step2-button').addClass('btn-primary');

            // Create the next view
            this.filtersView = new FiltersView({
                model: _this.visualization
            });

            // Render the next view
            this.filtersView.render();

        },

        // Method for moving to step 3
        step3: function() {

            // Get a reference to the parent object
            var _this = this;

            // Store all the filters in this array
            var data_filters = [];

            // Serialize the form data
            var filters_array = $('#filters-form').serializeArray();

            // Each filter is an object to make our lives easier
            var filter = new Object();

            // Go through each of the filters and create objects
            for (var i = 0; i < filters_array.length; i++) {

                // Filters are in groups of three objects
                if (i % 3 == 0 && i != 0) {
                    data_filters.push(filter);
                    filter = new Object();
                }

                // Set the object attributes
                var attribute = filters_array[i];
                filter[attribute.name] = attribute.value;

            } 

            // Add the last filter into the array
            data_filters.push(filter);

            // Now add the filters to the main Visualization object
            _this.visualization.set("filters", data_filters);

            // Fix the active things on the top
            $('#step2-button').removeClass('btn-primary');
            $('#step2-button').addClass('btn-default');
            $('#step3-button').removeClass('btn-default');
            $('#step3-button').addClass('btn-primary');

            // Load the last step
            this.visualizationView = new VisualizationView({
                model: _this.visualization
            });

            // Render it and we're off
            this.visualizationView.render();

            // Let's see if this works
            var identifier = this.visualization.get("dataset").identifier;
            console.log(data_filters);
            $.post('/api/' + identifier, { filters: data_filters}, function(data) {
                console.log(data);
            });

        },

        setVisualizationType: function(ev) {

            // Get the type from the ID
            var type = $(ev.target).attr('id');

            // Deselect all the other options
            $('.visualization-choice').each(function() {
                $(this).removeClass('selected-choice');
            });

            // Add the selection to the right one
            $(ev.target).addClass('selected-choice');

        },

        // Responsible for setting the preview window
        previewVisualization: function() {

            // Get a reference to the parent object
            var _this = this;

            // Variables we need to pick up when building our visualization
            var selectedChoice;

            // First get the visualization choice
            $('.visualization-choice').each(function() {
                if ($(this).hasClass('selected-choice')) {
                    selectedChoice = $(this);
                }
            });

            // Get parameters that we need
            var type = selectedChoice.attr('id');
            var identifier = this.visualization.get('dataset').identifier;
            var data_filters = this.visualization.get('filters');

            // Now figure out the type
            if (type == 'table') {

                $.post('/api/' + identifier, { filters: data_filters }, function(data) {

                    // First render the table view
                    var tableView = new TableView({
                        model: _this.visualization.get('dataset')
                    });
                    tableView.render();

                    // Create a table row view
                    var tableRowCollection = new TableRowCollection([], {
                        datasetAttributes: _this.visualization.get('dataset')
                    });

                    var tableRowView = new TableRowView({
                        model: tableRowCollection
                    });

                    // Set the data source
                    tableRowView.model.reset(data);

                    // Render it
                    tableRowView.render();

                });

            }

            if (type == 'line') {

            }

            if (type == 'pie') {

            }

            if (type == 'bar') {

            }

        }

    });

    var App = new AppView();

</script>