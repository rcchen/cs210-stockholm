<div class="container">
	<h3><%= @collection.name %></h3>
	<div id="information" style="margin: 30px 0px;">
		<div class="row">
			<div class="col-xs-6">
				<table class="table">
					<tr>
						<td>Records</td>
						<td><%= @collection.entries.count %></td>
					</tr>
					<tr>
						<td>Created</td>
						<td><%= @collection.created_at %></td>
					</tr>
					<tr>
						<td>Last Updated</td>
						<td><%= @collection.updated_at %></td>
					</tr>
					<tr>
						<td>Endpoint</td>
						<td><a href="/api/<%= @collection.base_url %>">/api/<%= @collection.base_url %></a></td>
					</tr>
				</table>
			</div>
			<div class="col-xs-6">
				<pre id="attributes"></pre>
			</div>
		</div>
	</div>
	<div id="charts">
		<h3>Charts</h3>
		<svg id="chart-pie" style="height: 740px;"></svg>
	</div>
	<div id="filters">
		<h3>Data</h3>
		<form id="filters-form">
			<div id="filter-attributes">
			</div>
			<div id="filter-actions" style="margin: 20px 0px;">
				<button type="button" class="btn btn-success" id="add-filter">Add Filter</button>
				<button type="button" class="btn btn-primary" id="submit-filter">Submit</button>
			</div>
		</form>
	</div>
	<div id="dataset" style="margin: 30px 0px;">
		<table class="table table-hover">
			<thead>
				<tr>
					<% JSON.parse(@collection.attrs).each do |key, value| %>
					<th><%= key %></th>
					<% end %>
				</tr>
			</thead>
			<tbody id="helix">
				<% @collection.entries.each do |entry| %>
					<tr>
					<% entry.properties.each do |property| %>
					<td> <%= property.value %> </td>
					<% end %>
					</tr>
				<% end %>
			</tbody>
		</table>
	</div>
</div>
<script id="filterTemplate" type="text/template">
	<div class="form-attribute" style="margin: 10px 0px;">
		<div class="row">
			<div class="col-xs-5">
				<select class="form-control" name="filter-attribute">
					<% JSON.parse(@collection.attrs).each do |key, value| %>
					<option><%= key %></option>
					<% end %>
				</select>
			</div>
			<div class="col-xs-3">
				<select class="form-control" name="filter-sign">
					<option>less than (<)</option>
					<option>equals (=)</option>
					<option>greater than (>)</option>
				</select>
			</div>	
			<div class="col-xs-3">
				<input class="form-control" name="filter-value" />
			</div>
			<div class="col-xs-1">
				<button type="button" class="btn btn-danger filter-remove">Remove</button>
			</div>
		</div>
	</div>
</script>
<script id="dataTemplate" type="text/template">
	<tr>
		<% JSON.parse(@collection.attrs).each do |key, value| %>
		<td><@= <%= key %> @></td>
		<% end %>
	</tr>


</script>
<script>
	// Eliminate conflicts with Rails
	_.templateSettings = {
	    interpolate: /\<\@\=(.+?)\@\>/gim,
	    evaluate: /\<\@(.+?)\@\>/gim,
	    escape: /\<\@\-(.+?)\@\>/gim
	};
	/*_.templateSettings = {
	    interpolate: /\{\{\=(.+?)\}\}/g,
	    evaluate: /\{\{(.+?)\}\}/g
	};*/
	/*_.templateSettings = {
  		interpolate : /\{\{(.+?)\}\}/g
	};*/
	var DataModel = Backbone.Model.extend();
	var DataCollection = Backbone.Collection.extend({
		model: DataModel,
		url: '/api/<%= @collection.base_url %>'
	});

	var DataView = Backbone.View.extend({
		el: "#helix",
		template: _.template($('#dataTemplate').html()),
 		render: function(eventName) {
			_.each(this.model.models, function(data) {
				var dataTemplate = this.template(data.toJSON());
				$(this.el).append(dataTemplate);
			}, this);
			return this;
		}
	})

	var AppView = Backbone.View.extend({
		el: "body",
		initialize: function() {
			var collection = new DataCollection();
			var collectionView = new DataView({
				model: collection
			});
			collection.bind('reset', function() {
				collectionView.render();
			});
			collection.fetch();
		}

	});

	var App = new AppView;

	// Display the JSON attribute preview on the right
	var sample = JSON.parse('<%= @collection.attrs.to_s.html_safe %>');
	document.getElementById('attributes').innerHTML = JSON.stringify(sample, null, 2);

	var FilterView = Backbone.View.extend({
		initialize: function() {
			this.render();
		},
		render: function() {
			var template = _.template($('#filterTemplate').html(), {});
			$('#filter-attributes').append(template);
		}
	});

	$('#add-filter').click(function() {
		new FilterView();
	});

	$('#submit-filter').click(function() {
		var filters = $('#filters-form').serializeArray();
		console.log(filters);
	});

	$('.filter-remove').live('click', function() {
		$(this).parent().parent().parent().remove();
		event.preventDefault();
	});


	$.post('/api/<%= @collection.base_url %>', { chart: "pie", key: "county", aggregate: "ballots" }, function(data) {
			//Donut chart example
			nv.addGraph(function() {
			  var chart = nv.models.pieChart()
			      .x(function(d) { return d.label })
			      .y(function(d) { return d.value })
			      .showLabels(true)     //Display pie labels
			      .labelThreshold(.05)  //Configure the minimum slice size for labels to show up
			      .labelType("percent") //Configure what type of data to show in the label. Can be "key", "value" or "percent"
			      .donut(true)          //Turn on Donut mode. Makes pie chart look tasty!
			      .donutRatio(0.35)     //Configure how big you want the donut hole size to be.
			      ;
			 
			    d3.select("svg#chart-pie")
			        .datum(data)
			        .transition().duration(350)
			        .call(chart);
			  return chart;
			});
	});


</script>